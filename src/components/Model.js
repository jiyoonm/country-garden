import React, { useRef, useState, useEffect,useContext } from "react"
import { useGLTF } from "@react-three/drei";
import { useThree } from "@react-three/fiber";

import useStore from "../appStore";
import { useSpring, animated,config } from '@react-spring/three'
export default function Model({navigate,...props}) {
  // const { width, height } = useThree((state) => state.viewport)
  const { width, height } = useThree((state) => state.viewport)

  const ref=useRef();
    const red1=useRef();
    const [hovered, setHover] = useState()
 const [hovers, set] = useState()
 

 useEffect(() => {    document.body.style.cursor = hovered ? "pointer" : "auto"
}, [hovered])
  useEffect(() => {    document.body.style.cursor = hovers ? "pointer" : "auto"
}, [hovers])
const clicked =  (val, name) => {
  // console.log(val)
  // setPlaylist(val,name)
  navigate(`garden/${name}`)
}  
// const isVisible =  useStore((state) => state.isVisible);
const isVisible =true

const { scale } = useSpring({
scale: hovers ?'gray' : 'black',
config: { duration: 50 }
});
const { scale1 } = useSpring({
scale1: hovered ?'gray' : 'black',
config: { duration: 50 }
});
  const group = useRef();
  const { nodes, materials } = useGLTF("/rosesforexport_nobase.glb");
  return (
    <group ref={group}scale={.7} rotation={[0,0,0]}{...props} dispose={null}>
      <animated.mesh
            visible={isVisible}


        material-emissiveIntensity={.3}
        material-emissive  = {scale1}
        castShadow
        receiveShadow
        geometry={nodes.rose001.geometry}
        material={materials["Material.003"]}
        position={[2.49, 5.83  , -9.37]}
        rotation={[0, -1.23, 0]}
        scale={[0.65, 0.67, 0.85]}
      />
      <animated.mesh
            visible={isVisible}

       onPointerOver={(e) => setHover(true)}
       onPointerOut={(e) => setHover(false)}
       material-emissiveIntensity={.3}

       material-emissive  ={scale1}
       name={'28wr812Ng6Uv1FHXxX5nE5'}
       onClick={() => clicked('28wr812Ng6Uv1FHXxX5nE5', "rose")}
        castShadow
        receiveShadow
        geometry={nodes.rose.geometry}
        material={materials["Material.049"]}
        position={[0.34, 7.37  , -8.25]}
        rotation={[-Math.PI, 0.55, -Math.PI]}
        scale={[0.65, 0.74, 0.85]}
      />
      <animated.mesh
            visible={isVisible}

        ref={red1}
        onPointerOver={(e) => set(true)}
        onPointerOut={(e) => set(false)}
        material-emissiveIntensity={.3}
        material-emissive  ={scale}
        onClick={(e) => clicked('4Eu1Abn2J95gAV4mCfkG8V', 'chrysanthemum')}
        castShadow
        receiveShadow
        geometry={nodes.daisy.geometry}
        material={materials.Material}
        position={[-1.31, -1.22  , -2.13]}
        rotation={[0, 0.36, 0]}
        scale={[0.23, 0.42, 0.2]}
      />
      <animated.mesh
            visible={isVisible}

        castShadow
        receiveShadow
        onClick={() => clicked('0ZWrxCwEj34SEbW1GuQefv', "tulip")}

        geometry={nodes.tulip001.geometry}
        material={materials["Material.011"]}
        position={[2.88, 4.62  , 3.88]}
        rotation={[Math.PI / 2, 0, -2.81]}
        scale={[0.47, 0.47, 0.53]}
      />
      <mesh
            visible={isVisible}

        castShadow
        receiveShadow
        geometry={nodes.tulip002.geometry}
        material={materials["Material.004"]}
        position={[2.64, 6.03  , 1.59]}
        rotation={[Math.PI / 2, 0, -1.71]}
        scale={[0.47, 0.47, 0.6]}
      />
      {/* <Desert/> */}
    </group>
  );
}

useGLTF.preload("/rosesforexport_nobase.glb");


/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/